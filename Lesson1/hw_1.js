'use strict';
/*
1. Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту. Подсказка: расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту, Tc – температура по Цельсию
*/
function celsiusToFahrenheit() {
    let degreesCelsius
    degreesCelsius = +prompt('Введите градусы Цельсия')
    if (isNaN(degreesCelsius)) {
        alert('Введено не числовое значение!')
    } else {
        alert(`${degreesCelsius} градусов по Цельсию равно ${(9 / 5) * degreesCelsius + 32} градусов по Фарингейту`);
    }
}

celsiusToFahrenheit();

/*
2.Объявить две переменные: admin и name. Записать в name строку "Василий"; Скопировать значение из name в admin. Вывести admin (должно вывести «Василий»).
*/
let admin, name = 'Василий'
admin = name
name = 'Олег'
alert(admin)

/*
3. *Чему будет равно JS-выражение 1000 + "108"/
'1000108'
4.
Общее:
async и defer не блокируют отрисовку страницы. Так что пользователь может просмотреть содержимое страницы и ознакомиться с ней сразу же.
Pазличия:
    1.Порядок
    async: Порядок загрузки (кто загрузится первым, тот и сработает).
    defer:	Порядок документа (как расположены в документе).

    2.Событие DOMContentLoaded – DOM готов, так что обработчик может искать DOM-узлы и инициализировать интерфейс.
    async: Не имеет значения. Может загрузиться и выполниться до того, как страница полностью загрузится. Такое случается, если скрипты маленькие или хранятся в кеше, а документ достаточно большой.
    defer:	Выполняется после того, как документ загружен и обработан (ждёт), непосредственно перед DOMContentLoaded.
Использование:
    На практике defer используется для скриптов, которым требуется доступ ко всему DOM и/или важен их относительный порядок выполнения.
    А async хорош для независимых скриптов, например счётчиков и рекламы, относительный порядок выполнения которых не играет роли.
*/
